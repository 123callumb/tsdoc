// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`00 Tokenizer simple case 1`] = `
Object {
  "buffer": "/**[n] * line 1 [n] * line 2[n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": ">line 1<",
      "span": ">    < ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">line 1<",
      "span": "    > <",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">line 1<",
      "span": "     > <",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">line 1<",
      "span": "      ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 1,
      "line": ">line 2<",
      "span": ">    < ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 1,
      "line": ">line 2<",
      "span": "    > <",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 1,
      "line": ">line 2<",
      "span": "     > <",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 1,
      "line": ">line 2<",
      "span": "      ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 1,
      "line": ">line 2<",
      "span": "      ><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`01 Tokenizer degenerate cases 1`] = `
Object {
  "buffer": "/***/",
  "tokens": Array [
    Object {
      "indexOfLine": -1,
      "line": "><",
      "span": "",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`01 Tokenizer degenerate cases 2`] = `
Object {
  "buffer": "/**[n] *[n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": "><",
      "span": "><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 0,
      "line": "><",
      "span": "><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`01 Tokenizer degenerate cases 3`] = `
Object {
  "buffer": "/**[n] [n] [n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": "><",
      "span": "><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 1,
      "line": "><",
      "span": "><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 1,
      "line": "><",
      "span": "><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`02 Backslash escapes: positive examples 1`] = `
Object {
  "buffer": "/**[n] * [b]$[b]@param[n] * double-backslash: [b][b][n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": ">[b]$[b]@param<",
      "span": ">   <         ",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 0,
      "line": ">[b]$[b]@param<",
      "span": "   > <        ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">[b]$[b]@param<",
      "span": "    >   <     ",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 0,
      "line": ">[b]$[b]@param<",
      "span": "       > <    ",
      "tokenKind": "AtSign",
    },
    Object {
      "indexOfLine": 0,
      "line": ">[b]$[b]@param<",
      "span": "        >     <",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">[b]$[b]@param<",
      "span": "             ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": ">      <                 ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "      > <                ",
      "tokenKind": "Hyphen",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "       >         <       ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "                > <      ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "                 > <     ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "                  >   <  ",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "                     >   <",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "                        ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 1,
      "line": ">double-backslash: [b][b]<",
      "span": "                        ><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`03 Backslash escapes: negative examples 1`] = `
Object {
  "buffer": "/**[n] * letter: [b]A space: [b]  end of line: [b][n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": ">      <                                  ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "      > <                                 ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "       > <                                ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "        >   <                             ",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "           > <                            ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "            > <                           ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "             >     <                      ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                  > <                     ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                   > <                    ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                    >   <                 ",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                       >  <               ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                         >   <            ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                            > <           ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                             >  <         ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                               > <        ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                                >    <    ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                                    > <   ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                                     > <  ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                                      >   <",
      "tokenKind": "Backslash",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                                         ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 0,
      "line": ">letter: [b]A space: [b]  end of line: [b]<",
      "span": "                                         ><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`04 General characters 1`] = `
Object {
  "buffer": "/**[n] * ![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~[n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "> <                                     ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": " >   <                                  ",
      "tokenKind": "DoubleQuote",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "    > <                                 ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "     > <                                ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "      > <                               ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "       > <                              ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "        > <                             ",
      "tokenKind": "SingleQuote",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "         > <                            ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "          > <                           ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "           > <                          ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "            > <                         ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "             > <                        ",
      "tokenKind": "Comma",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "              > <                       ",
      "tokenKind": "Hyphen",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "               > <                      ",
      "tokenKind": "Period",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                > <                     ",
      "tokenKind": "Slash",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                 > <                    ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                  > <                   ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                   >   <                ",
      "tokenKind": "LessThan",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                      > <               ",
      "tokenKind": "Equals",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                       >   <            ",
      "tokenKind": "GreaterThan",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                          > <           ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                           > <          ",
      "tokenKind": "AtSign",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                            > <         ",
      "tokenKind": "LeftSquareBracket",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                             > <        ",
      "tokenKind": "RightSquareBracket",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                              > <       ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                               > <      ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                >   <   ",
      "tokenKind": "Backtick",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                   > <  ",
      "tokenKind": "LeftCurlyBracket",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                    > < ",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                     > <",
      "tokenKind": "RightCurlyBracket",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                      > <",
      "tokenKind": "OtherPunctuation",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                       ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 0,
      "line": ">![q]#$%&'()*+,-./:;[<]=[>]?@[]^_[c]{|}~<",
      "span": "                                       ><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;

exports[`05 Spacing characters 1`] = `
Object {
  "buffer": "/**[n] * space:  tab: [t]  form feed: [f] end[n] */",
  "tokens": Array [
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": ">     <                              ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "     > <                             ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "      >  <                           ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "        >   <                        ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "           > <                       ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "            >      <                 ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                  >    <             ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                      > <            ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                       >    <        ",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                           > <       ",
      "tokenKind": "Colon",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                            > <      ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                             >   <   ",
      "tokenKind": "Other",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                                > <  ",
      "tokenKind": "Spacing",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                                 >   <",
      "tokenKind": "AsciiWord",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                                    ><",
      "tokenKind": "Newline",
    },
    Object {
      "indexOfLine": 0,
      "line": ">space:  tab: [t]  form feed: [f] end<",
      "span": "                                    ><",
      "tokenKind": "EndOfInput",
    },
  ],
}
`;
